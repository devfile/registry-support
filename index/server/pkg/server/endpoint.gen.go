// Copyright Red Hat
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4. **DO NOT EDIT**
package server // ServerInterface represents all server handlers.
import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

type ServerInterface interface {

	// (DELETE /)
	DeleteRootEndpoint(c *gin.Context)
	// Root endpoint of registry server.
	// (GET /)
	ServeRootEndpoint(c *gin.Context)

	// (POST /)
	PostRootEndpoint(c *gin.Context)

	// (PUT /)
	PutRootEndpoint(c *gin.Context)

	// (DELETE /devfiles/{stack})
	DeleteDevfile(c *gin.Context, stack string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string, params ServeDevfileParams)

	// (POST /devfiles/{stack})
	PostDevfile(c *gin.Context, stack string)

	// (PUT /devfiles/{stack})
	PutDevfile(c *gin.Context, stack string)

	// (DELETE /devfiles/{stack}/starter-projects/{starterProject})
	DeleteDevfileStarterProject(c *gin.Context, stack string, starterProject string)
	// Fetches starter project by stack and project name
	// (GET /devfiles/{stack}/starter-projects/{starterProject})
	ServeDevfileStarterProject(c *gin.Context, stack string, starterProject string, params ServeDevfileStarterProjectParams)

	// (POST /devfiles/{stack}/starter-projects/{starterProject})
	PostDevfileStarterProject(c *gin.Context, stack string, starterProject string)

	// (PUT /devfiles/{stack}/starter-projects/{starterProject})
	PutDevfileStarterProject(c *gin.Context, stack string, starterProject string)

	// (DELETE /devfiles/{stack}/{version})
	DeleteDevfileWithVersion(c *gin.Context, stack string, version string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack}/{version})
	ServeDevfileWithVersion(c *gin.Context, stack string, version string, params ServeDevfileWithVersionParams)

	// (POST /devfiles/{stack}/{version})
	PostDevfileWithVersion(c *gin.Context, stack string, version string)

	// (PUT /devfiles/{stack}/{version})
	PutDevfileWithVersion(c *gin.Context, stack string, version string)

	// (DELETE /devfiles/{stack}/{version}/starter-projects/{starterProject})
	DeleteDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)
	// Fetches starter project by stack name, stack version, and project name
	// (GET /devfiles/{stack}/{version}/starter-projects/{starterProject})
	ServeDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string, params ServeDevfileStarterProjectWithVersionParams)

	// (POST /devfiles/{stack}/{version}/starter-projects/{starterProject})
	PostDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)

	// (PUT /devfiles/{stack}/{version}/starter-projects/{starterProject})
	PutDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)

	// (DELETE /health)
	DeleteHealthCheck(c *gin.Context)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)

	// (POST /health)
	PostHealthCheck(c *gin.Context)

	// (PUT /health)
	PutHealthCheck(c *gin.Context)

	// (DELETE /index)
	DeleteDevfileIndexV1(c *gin.Context)
	// Gets index schemas of the stack devfiles.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context, params ServeDevfileIndexV1Params)

	// (POST /index)
	PostDevfileIndexV1(c *gin.Context)

	// (PUT /index)
	PutDevfileIndexV1(c *gin.Context)

	// (DELETE /index/{indexType})
	DeleteDevfileIndexV1WithType(c *gin.Context, indexType string)
	// Gets index schemas of the devfiles of specific type.
	// (GET /index/{indexType})
	ServeDevfileIndexV1WithType(c *gin.Context, indexType string, params ServeDevfileIndexV1WithTypeParams)

	// (POST /index/{indexType})
	PostDevfileIndexV1WithType(c *gin.Context, indexType string)

	// (PUT /index/{indexType})
	PutDevfileIndexV1WithType(c *gin.Context, indexType string)

	// (DELETE /v2index)
	DeleteDevfileIndexV2(c *gin.Context)
	// Gets V2 index schemas of the stack devfiles.
	// (GET /v2index)
	ServeDevfileIndexV2(c *gin.Context, params ServeDevfileIndexV2Params)

	// (POST /v2index)
	PostDevfileIndexV2(c *gin.Context)

	// (PUT /v2index)
	PutDevfileIndexV2(c *gin.Context)

	// (DELETE /v2index/{indexType})
	DeleteDevfileIndexV2WithType(c *gin.Context, indexType string)
	// Gets V2 index schemas of the devfiles of specific type.
	// (GET /v2index/{indexType})
	ServeDevfileIndexV2WithType(c *gin.Context, indexType string, params ServeDevfileIndexV2WithTypeParams)

	// (POST /v2index/{indexType})
	PostDevfileIndexV2WithType(c *gin.Context, indexType string)

	// (PUT /v2index/{indexType})
	PutDevfileIndexV2WithType(c *gin.Context, indexType string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) DeleteRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRootEndpoint(c)
}

// ServeRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) ServeRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeRootEndpoint(c)
}

// PostRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PostRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRootEndpoint(c)
}

// PutRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PutRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRootEndpoint(c)
}

// DeleteDevfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfile(c, stack)
}

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack, params)
}

// PostDevfile operation middleware
func (siw *ServerInterfaceWrapper) PostDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfile(c, stack)
}

// PutDevfile operation middleware
func (siw *ServerInterfaceWrapper) PutDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfile(c, stack)
}

// DeleteDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileStarterProject(c, stack, starterProject)
}

// ServeDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileStarterProjectParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProject(c, stack, starterProject, params)
}

// PostDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileStarterProject(c, stack, starterProject)
}

// PutDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileStarterProject(c, stack, starterProject)
}

// DeleteDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileWithVersion(c, stack, version)
}

// ServeDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileWithVersionParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileWithVersion(c, stack, version, params)
}

// PostDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileWithVersion(c, stack, version)
}

// PutDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileWithVersion(c, stack, version)
}

// DeleteDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// ServeDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileStarterProjectWithVersionParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProjectWithVersion(c, stack, version, starterProject, params)
}

// PostDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// PutDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// DeleteHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) DeleteHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteHealthCheck(c)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// PostHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) PostHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostHealthCheck(c)
}

// PutHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) PutHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutHealthCheck(c)
}

// DeleteDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV1(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1Params

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c, params)
}

// PostDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV1(c)
}

// PutDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV1(c)
}

// DeleteDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV1WithType(c, indexType)
}

// ServeDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1WithTypeParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1WithType(c, indexType, params)
}

// PostDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV1WithType(c, indexType)
}

// PutDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV1WithType(c, indexType)
}

// DeleteDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV2(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV2(c)
}

// ServeDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2Params

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minVersion", c.Request.URL.Query(), &params.MinVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxVersion", c.Request.URL.Query(), &params.MaxVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "default" -------------

	err = runtime.BindQueryParameter("form", true, false, "default", c.Request.URL.Query(), &params.Default)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter default: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "commandGroups" -------------

	err = runtime.BindQueryParameter("form", true, false, "commandGroups", c.Request.URL.Query(), &params.CommandGroups)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commandGroups: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2(c, params)
}

// PostDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV2(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV2(c)
}

// PutDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV2(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV2(c)
}

// DeleteDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV2WithType(c, indexType)
}

// ServeDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2WithTypeParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minVersion", c.Request.URL.Query(), &params.MinVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxVersion", c.Request.URL.Query(), &params.MaxVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "default" -------------

	err = runtime.BindQueryParameter("form", true, false, "default", c.Request.URL.Query(), &params.Default)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter default: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "commandGroups" -------------

	err = runtime.BindQueryParameter("form", true, false, "commandGroups", c.Request.URL.Query(), &params.CommandGroups)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commandGroups: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2WithType(c, indexType, params)
}

// PostDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV2WithType(c, indexType)
}

// PutDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV2WithType(c, indexType)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/", wrapper.DeleteRootEndpoint)

	router.GET(options.BaseURL+"/", wrapper.ServeRootEndpoint)

	router.POST(options.BaseURL+"/", wrapper.PostRootEndpoint)

	router.PUT(options.BaseURL+"/", wrapper.PutRootEndpoint)

	router.DELETE(options.BaseURL+"/devfiles/:stack", wrapper.DeleteDevfile)

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.POST(options.BaseURL+"/devfiles/:stack", wrapper.PostDevfile)

	router.PUT(options.BaseURL+"/devfiles/:stack", wrapper.PutDevfile)

	router.DELETE(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.DeleteDevfileStarterProject)

	router.GET(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.ServeDevfileStarterProject)

	router.POST(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.PostDevfileStarterProject)

	router.PUT(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.PutDevfileStarterProject)

	router.DELETE(options.BaseURL+"/devfiles/:stack/:version", wrapper.DeleteDevfileWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version", wrapper.ServeDevfileWithVersion)

	router.POST(options.BaseURL+"/devfiles/:stack/:version", wrapper.PostDevfileWithVersion)

	router.PUT(options.BaseURL+"/devfiles/:stack/:version", wrapper.PutDevfileWithVersion)

	router.DELETE(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.DeleteDevfileStarterProjectWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.ServeDevfileStarterProjectWithVersion)

	router.POST(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.PostDevfileStarterProjectWithVersion)

	router.PUT(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.PutDevfileStarterProjectWithVersion)

	router.DELETE(options.BaseURL+"/health", wrapper.DeleteHealthCheck)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.POST(options.BaseURL+"/health", wrapper.PostHealthCheck)

	router.PUT(options.BaseURL+"/health", wrapper.PutHealthCheck)

	router.DELETE(options.BaseURL+"/index", wrapper.DeleteDevfileIndexV1)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	router.POST(options.BaseURL+"/index", wrapper.PostDevfileIndexV1)

	router.PUT(options.BaseURL+"/index", wrapper.PutDevfileIndexV1)

	router.DELETE(options.BaseURL+"/index/:indexType", wrapper.DeleteDevfileIndexV1WithType)

	router.GET(options.BaseURL+"/index/:indexType", wrapper.ServeDevfileIndexV1WithType)

	router.POST(options.BaseURL+"/index/:indexType", wrapper.PostDevfileIndexV1WithType)

	router.PUT(options.BaseURL+"/index/:indexType", wrapper.PutDevfileIndexV1WithType)

	router.DELETE(options.BaseURL+"/v2index", wrapper.DeleteDevfileIndexV2)

	router.GET(options.BaseURL+"/v2index", wrapper.ServeDevfileIndexV2)

	router.POST(options.BaseURL+"/v2index", wrapper.PostDevfileIndexV2)

	router.PUT(options.BaseURL+"/v2index", wrapper.PutDevfileIndexV2)

	router.DELETE(options.BaseURL+"/v2index/:indexType", wrapper.DeleteDevfileIndexV2WithType)

	router.GET(options.BaseURL+"/v2index/:indexType", wrapper.ServeDevfileIndexV2WithType)

	router.POST(options.BaseURL+"/v2index/:indexType", wrapper.PostDevfileIndexV2WithType)

	router.PUT(options.BaseURL+"/v2index/:indexType", wrapper.PutDevfileIndexV2WithType)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bn4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
