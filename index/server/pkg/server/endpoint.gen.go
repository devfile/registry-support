//
// Copyright 2023 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0. **DO NOT EDIT**
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string)
	// Fetches starter project by stack and project name
	// (GET /devfiles/{stack}/starter-projects/{starterProject})
	ServeDevfileStarterProject(c *gin.Context, stack string, starterProject string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack}/{version})
	ServeDevfileWithVersion(c *gin.Context, stack string, version string)
	// Fetches starter project by stack name, stack version, and project name
	// (GET /devfiles/{stack}/{version}/starter-projects/{starterProject})
	ServeDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)
	// Gets index schemas of the stack devfiles.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context, params ServeDevfileIndexV1Params)
	// Gets index schemas of the devfiles of specific type.
	// (GET /index/{indexType})
	ServeDevfileIndexV1WithType(c *gin.Context, indexType string, params ServeDevfileIndexV1WithTypeParams)
	// Gets V2 index schemas of the stack devfiles.
	// (GET /v2index)
	ServeDevfileIndexV2(c *gin.Context, params ServeDevfileIndexV2Params)
	// Gets V2 index schemas of the devfiles of specific type.
	// (GET /v2index/{indexType})
	ServeDevfileIndexV2WithType(c *gin.Context, indexType string, params ServeDevfileIndexV2WithTypeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack)
}

// ServeDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProject(c, stack, starterProject)
}

// ServeDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter version: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileWithVersion(c, stack, version)
}

// ServeDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter version: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1Params

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c, params)
}

// ServeDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter indexType: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1WithTypeParams

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1WithType(c, indexType, params)
}

// ServeDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2Params

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2(c, params)
}

// ServeDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter indexType: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2WithTypeParams

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2WithType(c, indexType, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.GET(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.ServeDevfileStarterProject)

	router.GET(options.BaseURL+"/devfiles/:stack/:version", wrapper.ServeDevfileWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.ServeDevfileStarterProjectWithVersion)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	router.GET(options.BaseURL+"/index/:indexType", wrapper.ServeDevfileIndexV1WithType)

	router.GET(options.BaseURL+"/v2index", wrapper.ServeDevfileIndexV2)

	router.GET(options.BaseURL+"/v2index/:indexType", wrapper.ServeDevfileIndexV2WithType)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
