//
// Copyright 2022 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0. **DO NOT EDIT**
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string)
	// Fetches starter project by stack and project name
	// (GET /devfiles/{stack}/starter-projects/{starterProject})
	ServeDevfileStarterProject(c *gin.Context, stack string, starterProject string)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)
	// Get index.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack)
}

// ServeDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProject(c, stack, starterProject)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.GET(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.ServeDevfileStarterProject)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/cNhD9KwRboC0gS7abXnQrmrjxoa3hNXqpfeBSI4mxRLLkaDcbQ/+9GOrDK2s3",
	"Xm/cIDeJHA5n3rx5nAcuTW2NBo2epw/cgbdGewg/GaxyVcE754y77jdoXRqNoJE+hbWVkgKV0ckHbzSt",
	"eVlCLejLOmPBoercAfmhD9xY4Cn36JQueMQ/nhTmRIuaFsNlvI24R4GNf8580Vm1bTSYmeUHkBhWtoPb",
	"iLr6hoJrI56Bl05Zio6n/EKoCjKGhhWADEtgPfoxD7bh+0+DF6bR2SsU4yvD+38Cliud7UPsKKS+d5Dz",
	"lH+XPPZG0u365G3n9wAADvMyy2vRSAne503FCMDgPb7Vt3qBQt4PObI+mZBrCaLC8hVIUYP3ooDnyvRH",
	"b/bltHiFCw8H8H2AiXVUDMApncHHo3BTCLV/rsqLzvwxaOGc2BwA0pd5PxyRS8p/QiWPwiG4K2cI3gOg",
	"+aTsNPbcuFogT/lSaeE2PHpS2ZfEd0FMX24QPPV5Zta6MiKLA4I9DHTl0E0UWlX9lfP0nxG6EtH6NEmc",
	"WMeFwrJZNh7ckLI0ddJ3VCKsSlbn8Xl8OkJcCQSPg0UcaNBGDx03rZD3gbu887vDWWLvC/r0ydq4e2+F",
	"BJ+szkRlS3HO27s24ounehHHSRyPEQSG9n/9/ZQ7yMYp3ITDXScthVdyrARF1a2M8BMQHfhK56Z73reL",
	"8NbIpgaNAX1m8lFpHBTKo9uw63eLG/br1WUozc2j3s4tmPKs8ZCx3DimNIITEpUu2FphOTsWs0vNsFSe",
	"ZdsxREHTS+OR3HlwK/JAa7ZZVkrO/ERsYxomhWayFLoAppBoszGNY2ate1d5sFoLHTYbD8w6tRI4Tycm",
	"8BQSsQaK7QCDR3wFzncgnsWn8Rn1kbGghVU85T+HpYhbgWWo1MARnzx4kvSWFgvAeUmuARunQ8reglS5",
	"kszvegV2lYsCG7vpMqM2A7eCoVcoICdqQHA+9Mv0aipvd1WQYCINT0MOPOK9Kod9HnEH/zbKQcZTdA1E",
	"W1rwzFsv7wmqHYt30XQQPT893aeGo13y9MVvI/7m9M3B52azVRvxX15w73RKDl3a1DUpYMp/Bxzrs9xs",
	"ARsoJgqqwDCx8Ds6OyNJ0ivzie2kudvY0ur9NLoAlCV41tuz3sPAKciY0oyKCB4he6T4lGqhdW91z/Uf",
	"/Mg9oTNyuVIZeCY0E06WagXsx0/K/sTC2UG5mfCBze9vbq7YgODnibqYJPlt0zbaE84EdTpCgOMYaja2",
	"5O5op/kfHfa2m/bzu0f1357R4bENp9hciQKYNshy6rr4NdttH+HH1uspO9YjnE+6MfoQNZ49fOV0tNxJ",
	"6G78/K2Enn0vxffJlH8wrjMlmgU7KBC9seB6AQqTxyFgqO0h8uUvUZhB/z47CpLp/H48IsHPHi0O4xbh",
	"0ulN46rtqXJI0aMoIB4GRWWSoAZ7jCdmd+1/AQAA//96q8/MhBEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
