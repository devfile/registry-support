//
// Copyright 2023 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0. **DO NOT EDIT**
package server // ServerInterface represents all server handlers.
import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

type ServerInterface interface {
	// Root endpoint of registry server.
	// (GET /)
	ServeRootEndpoint(c *gin.Context)
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string)
	// Fetches starter project by stack and project name
	// (GET /devfiles/{stack}/starter-projects/{starterProject})
	ServeDevfileStarterProject(c *gin.Context, stack string, starterProject string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack}/{version})
	ServeDevfileWithVersion(c *gin.Context, stack string, version string)
	// Fetches starter project by stack name, stack version, and project name
	// (GET /devfiles/{stack}/{version}/starter-projects/{starterProject})
	ServeDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)
	// Gets index schemas of the stack devfiles.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context, params ServeDevfileIndexV1Params)
	// Gets index schemas of the devfiles of specific type.
	// (GET /index/{indexType})
	ServeDevfileIndexV1WithType(c *gin.Context, indexType string, params ServeDevfileIndexV1WithTypeParams)
	// OCI proxy GET endpoint.
	// (GET /v2/*{proxyPath})
	GetOciServerProxy(c *gin.Context, proxyPath string)
	// OCI proxy HEAD endpoint.
	// (HEAD /v2/*{proxyPath})
	HeadOciServerProxy(c *gin.Context, proxyPath string)
	// Gets V2 index schemas of the stack devfiles.
	// (GET /v2index)
	ServeDevfileIndexV2(c *gin.Context, params ServeDevfileIndexV2Params)
	// Gets V2 index schemas of the devfiles of specific type.
	// (GET /v2index/{indexType})
	ServeDevfileIndexV2WithType(c *gin.Context, indexType string, params ServeDevfileIndexV2WithTypeParams)
	// Registry viewer proxy root endpoint
	// (GET /viewer)
	ServeUIRoot(c *gin.Context)
	// Registry viewer proxy endpoints
	// (GET /viewer/*{proxyPath})
	ServeUI(c *gin.Context, proxyPath string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ServeRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) ServeRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeRootEndpoint(c)
}

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack)
}

// ServeDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProject(c, stack, starterProject)
}

// ServeDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter version: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileWithVersion(c, stack, version)
}

// ServeDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter version: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1Params

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c, params)
}

// ServeDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter indexType: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1WithTypeParams

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1WithType(c, indexType, params)
}

// GetOciServerProxy operation middleware
func (siw *ServerInterfaceWrapper) GetOciServerProxy(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyPath" -------------
	var proxyPath string

	err = runtime.BindStyledParameter("simple", false, "proxyPath", c.Param("proxyPath"), &proxyPath)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter proxyPath: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetOciServerProxy(c, proxyPath)
}

// HeadOciServerProxy operation middleware
func (siw *ServerInterfaceWrapper) HeadOciServerProxy(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyPath" -------------
	var proxyPath string

	err = runtime.BindStyledParameter("simple", false, "proxyPath", c.Param("proxyPath"), &proxyPath)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter proxyPath: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.HeadOciServerProxy(c, proxyPath)
}

// ServeDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2Params

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2(c, params)
}

// ServeDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter indexType: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2WithTypeParams

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2WithType(c, indexType, params)
}

// ServeUIRoot operation middleware
func (siw *ServerInterfaceWrapper) ServeUIRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeUIRoot(c)
}

// ServeUI operation middleware
func (siw *ServerInterfaceWrapper) ServeUI(c *gin.Context) {

	var err error

	// ------------- Path parameter "proxyPath" -------------
	var proxyPath string

	err = runtime.BindStyledParameter("simple", false, "proxyPath", c.Param("proxyPath"), &proxyPath)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter proxyPath: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeUI(c, proxyPath)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/", wrapper.ServeRootEndpoint)

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.GET(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.ServeDevfileStarterProject)

	router.GET(options.BaseURL+"/devfiles/:stack/:version", wrapper.ServeDevfileWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.ServeDevfileStarterProjectWithVersion)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	router.GET(options.BaseURL+"/index/:indexType", wrapper.ServeDevfileIndexV1WithType)

	router.GET(options.BaseURL+"/v2/*:proxyPath", wrapper.GetOciServerProxy)

	router.HEAD(options.BaseURL+"/v2/*:proxyPath", wrapper.HeadOciServerProxy)

	router.GET(options.BaseURL+"/v2index", wrapper.ServeDevfileIndexV2)

	router.GET(options.BaseURL+"/v2index/:indexType", wrapper.ServeDevfileIndexV2WithType)

	router.GET(options.BaseURL+"/viewer", wrapper.ServeUIRoot)

	router.GET(options.BaseURL+"/viewer/*:proxyPath", wrapper.ServeUI)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
