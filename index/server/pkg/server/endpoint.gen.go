//
// Copyright 2023 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0. **DO NOT EDIT**
package server // ServerInterface represents all server handlers.
import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

type ServerInterface interface {
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string)
	// Fetches starter project by stack and project name
	// (GET /devfiles/{stack}/starter-projects/{starterProject})
	ServeDevfileStarterProject(c *gin.Context, stack string, starterProject string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack}/{version})
	ServeDevfileWithVersion(c *gin.Context, stack string, version string)
	// Fetches starter project by stack name, stack version, and project name
	// (GET /devfiles/{stack}/{version}/starter-projects/{starterProject})
	ServeDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)
	// Gets index schemas of the stack devfiles.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context, params ServeDevfileIndexV1Params)
	// Gets index schemas of the devfiles of specific type.
	// (GET /index/{indexType})
	ServeDevfileIndexV1WithType(c *gin.Context, indexType string, params ServeDevfileIndexV1WithTypeParams)
	// Gets V2 index schemas of the stack devfiles.
	// (GET /v2index)
	ServeDevfileIndexV2(c *gin.Context, params ServeDevfileIndexV2Params)
	// Gets V2 index schemas of the devfiles of specific type.
	// (GET /v2index/{indexType})
	ServeDevfileIndexV2WithType(c *gin.Context, indexType string, params ServeDevfileIndexV2WithTypeParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack)
}

// ServeDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProject(c, stack, starterProject)
}

// ServeDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter version: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileWithVersion(c, stack, version)
}

// ServeDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter version: %s", err)})
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter starterProject: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1Params

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c, params)
}

// ServeDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter indexType: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1WithTypeParams

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1WithType(c, indexType, params)
}

// ServeDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2Params

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2(c, params)
}

// ServeDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter indexType: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2WithTypeParams

	// ------------- Optional query parameter "arch" -------------
	if paramValue := c.Query("arch"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Archs)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter arch: %s", err)})
		return
	}

	// ------------- Optional query parameter "icon" -------------
	if paramValue := c.Query("icon"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.IconType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter icon: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2WithType(c, indexType, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.GET(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.ServeDevfileStarterProject)

	router.GET(options.BaseURL+"/devfiles/:stack/:version", wrapper.ServeDevfileWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.ServeDevfileStarterProjectWithVersion)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	router.GET(options.BaseURL+"/index/:indexType", wrapper.ServeDevfileIndexV1WithType)

	router.GET(options.BaseURL+"/v2index", wrapper.ServeDevfileIndexV2)

	router.GET(options.BaseURL+"/v2index/:indexType", wrapper.ServeDevfileIndexV2WithType)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
