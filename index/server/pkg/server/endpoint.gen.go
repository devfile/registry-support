//
// Copyright 2022 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0. **DO NOT EDIT**
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)
	// Get index.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stack: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWwZLbNgz9FQ7aoyLtbtOLbp0mbXzoNBNnemn2QFOQxKxEsiRkx+PRv3dAUV47thNv",
	"NpPTamEABN4DHrkDZXtnDRoKUO4gqBZ7GT9f4brWHfKn7Lq/ayj/3cHPHmsooSVyoSwKLzd5o6kdVkNA",
	"r6whNJQr2xfVFF1Ip4v1XX6X3xQpd9FJwkCzR/4xWANjtoNPLxr7wkn1IBuEEqa8Z5IV7qHhz1BsrH8I",
	"TioMxfpWdq6VdzDejxks41Fceio4z4s831egTYWf0n/p/DGDgGrwmrYxGCMGKxm02uPCVU2WDGjrMAEB",
	"I0drU1v2rDAorx1pa6CEV1YNPRqS/L+wtUitCI+NDuS34t3r5Xvx29tF/sF8MO9bvOwhdBBDwErU1gtt",
	"CL1UpE0jNprak7BcLIygVgdRHdaQCWpRtDYQpwvo15yBbW5YdVqd5MnE1g5CSSNUK02DQpMgy0Yv7Mak",
	"VHX02kgTfxwCCuf1WtJpOzmDp4kHax6xM2BABmv0YQLxNr/Jb2HMwDo00mko4ZdoysBJaiNT84yEYhdI",
	"qoeRjQ3SKSXvkAZvYsvBodK1ViKG7EtNc3yOLi7MOvQRy0UFJSzRr3HeFS7Iyx4JfYj7cnw00zsdZWTP",
	"3pqt3ANkEE0lxN8hA4//DdpjBSX5AbO0mdxOGr1AXpsGsmlvUvQyRo9njfecNDhrwjTcdzc3/Cd1G/fc",
	"uU6r2FsR12KvCAer9FPxKBn7jZoB4E04zLKVffctWcbsM+iWg1IYQj10Yo9/XJnlOepyhuDlzcsn9ec8",
	"ZyY9oRNI0hCuwJu9uN7kZlcfUdEVQHzn404Q+0PqDitex1qbKs77LLmMzq9PZP+4XPTe+q9V+zo6sbL+",
	"WCx/cHFfQL5B+gx4PnDoe+m3UMKfSPvJXW0PpCGKpGxYQyA5wD3HFi3KjtprxO3kHplCxdTvBSF7E31+",
	"bzFp0DPk4piTHkOI9/qXYf4ruV2F80VNeHPc6aMWHMeLt7JBYSyJ2g6mOsfOCWYzK3xzok+kxPfENZxE",
	"x2+/XxYc/s/tc5nRhH34mhanJ9QjD9J7uX0SDYvDbp9FQ8TtwlLElxuTMd24g+8OH6gzroFkg/m8h9oW",
	"8cl5wfnI7X78PwAA//+d1X1kJQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
