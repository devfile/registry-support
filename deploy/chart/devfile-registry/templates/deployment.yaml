#
# Copyright Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "devfileregistry.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  name: {{ template "devfileregistry.fullname" . }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ template "devfileregistry.name" . }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "devfileregistry.name" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      {{- if .Values.persistence.enabled }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 2001
        fsGroup: 3001
      {{- end }}
      volumes:
        - name: devfile-registry-storage
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "devfileregistry.fullname" . }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: config
          configMap:
            name: {{ template "devfileregistry.fullname" . }}
            items:
              - key: registry-config.yml
                path: config.yml
      containers:
      - image: "{{ .Values.devfileIndex.image }}:{{ .Values.devfileIndex.tag }}"
        imagePullPolicy: {{ .Values.devfileIndex.imagePullPolicy }}
        name: devfile-registry
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
        {{- if not .Values.global.headless }}
        startupProbe:
          httpGet:
            path: /viewer
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 20
        {{- end }}
        resources:
          limits:
            memory: {{ .Values.devfileIndex.memoryLimit }}
          requests:
            memory: 64Mi
        env:
          - name: REGISTRY_NAME
            value: {{ .Values.telemetry.registryName }}
          - name: TELEMETRY_KEY
            value: {{ .Values.telemetry.key }}
          - name: REGISTRY_HEADLESS
            value: "{{ .Values.global.headless }}"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: "RuntimeDefault"
      {{- if not .Values.global.headless }}
      - image: "{{ .Values.registryViewer.image }}:{{ .Values.registryViewer.tag }}"
        imagePullPolicy: {{ .Values.registryViewer.imagePullPolicy }}
        name: registry-viewer
        ports: 
        livenessProbe:
          httpGet:
            path: /viewer
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 20
        readinessProbe:
          httpGet:
            path: /viewer
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 20
        resources:
          limits:
            memory: {{ .Values.registryViewer.memoryLimit }}
          requests:
            memory: 64Mi
        env:
          - name: NEXT_PUBLIC_ANALYTICS_WRITE_KEY
            value: {{ .Values.telemetry.registryViewerWriteKey }}
          - name: DEVFILE_REGISTRIES
            value: |
              [
                {
                  "name": "{{ template "devfileregistry.name" . }}",
                  "url": "http://localhost:8080",
                  "fqdn": "{{ template "devfileregistry.ingressUrl" . }}"
                }
              ]
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: "RuntimeDefault"
      {{- end }}
      - image: "{{ .Values.ociRegistry.image }}:{{ .Values.ociRegistry.tag }}"
        imagePullPolicy: {{ .Values.ociRegistry.imagePullPolicy }}
        name: oci-registry
        ports:
        livenessProbe:
          httpGet:
            path: /v2
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /v2
            port: 5000
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 3
        resources:
          limits:
            memory: {{ .Values.ociRegistry.memoryLimit }}
          requests:
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: "RuntimeDefault"
        volumeMounts:
        - name: devfile-registry-storage
          mountPath: "/var/lib/registry"
        - name: config
          mountPath: "/etc/docker/registry"
          readOnly: true
